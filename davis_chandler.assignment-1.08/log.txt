==21949== Memcheck, a memory error detector
==21949== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==21949== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==21949== Command: ./rlg327
==21949== Parent PID: 2653
==21949== 
==21949== Invalid read of size 4
==21949==    at 0x41AA64: dice::roll() const (dice.cpp:11)
==21949==    by 0x416C85: object_description::create_instance() (descriptions.cpp:900)
==21949==    by 0x409EA4: gen_objects(dungeon*) (dungeon.cpp:1095)
==21949==    by 0x403334: main (rlg327.cpp:229)
==21949==  Address 0x48 is not stack'd, malloc'd or (recently) free'd
==21949== 
==21949== 
==21949== Process terminating with default action of signal 11 (SIGSEGV)
==21949==  Access not within mapped region at address 0x48
==21949==    at 0x41AA64: dice::roll() const (dice.cpp:11)
==21949==    by 0x416C85: object_description::create_instance() (descriptions.cpp:900)
==21949==    by 0x409EA4: gen_objects(dungeon*) (dungeon.cpp:1095)
==21949==    by 0x403334: main (rlg327.cpp:229)
==21949==  If you believe this happened as a result of a stack
==21949==  overflow in your program's main thread (unlikely but
==21949==  possible), you can try to increase the size of the
==21949==  main thread stack using the --main-stacksize= flag.
==21949==  The main thread stack size used in this run was 8388608.
==21949== 
==21949== HEAP SUMMARY:
==21949==     in use at exit: 401,540 bytes in 531 blocks
==21949==   total heap usage: 443,051 allocs, 442,520 frees, 21,146,834 bytes allocated
==21949== 
==21949== 4,827 (2,688 direct, 2,139 indirect) bytes in 1 blocks are definitely lost in loss record 50 of 57
==21949==    at 0x4C29216: operator new(unsigned long) (vg_replace_malloc.c:334)
==21949==    by 0x41A496: __gnu_cxx::new_allocator<object_description>::allocate(unsigned long, void const*) (new_allocator.h:104)
==21949==    by 0x41A06F: __gnu_cxx::__alloc_traits<std::allocator<object_description> >::allocate(std::allocator<object_description>&, unsigned long) (alloc_traits.h:182)
==21949==    by 0x419B13: std::_Vector_base<object_description, std::allocator<object_description> >::_M_allocate(unsigned long) (stl_vector.h:170)
==21949==    by 0x418CC4: std::vector<object_description, std::allocator<object_description> >::_M_insert_aux(__gnu_cxx::__normal_iterator<object_description*, std::vector<object_description, std::allocator<object_description> > >, object_description const&) (vector.tcc:353)
==21949==    by 0x41790C: std::vector<object_description, std::allocator<object_description> >::push_back(object_description const&) (stl_vector.h:925)
==21949==    by 0x415EF3: parse_object_description(std::basic_ifstream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<object_description, std::allocator<object_description> >*) (descriptions.cpp:728)
==21949==    by 0x416423: parse_object_descriptions(std::basic_ifstream<char, std::char_traits<char> >&, dungeon*, std::vector<object_description, std::allocator<object_description> >*) (descriptions.cpp:787)
==21949==    by 0x41683B: parse_descriptions(dungeon*) (descriptions.cpp:824)
==21949==    by 0x402CB1: main (rlg327.cpp:88)
==21949== 
==21949== 5,140 (2,176 direct, 2,964 indirect) bytes in 1 blocks are definitely lost in loss record 51 of 57
==21949==    at 0x4C29216: operator new(unsigned long) (vg_replace_malloc.c:334)
==21949==    by 0x41A391: __gnu_cxx::new_allocator<monster_description>::allocate(unsigned long, void const*) (new_allocator.h:104)
==21949==    by 0x419F60: __gnu_cxx::__alloc_traits<std::allocator<monster_description> >::allocate(std::allocator<monster_description>&, unsigned long) (alloc_traits.h:182)
==21949==    by 0x4198B5: std::_Vector_base<monster_description, std::allocator<monster_description> >::_M_allocate(unsigned long) (stl_vector.h:170)
==21949==    by 0x418626: std::vector<monster_description, std::allocator<monster_description> >::_M_insert_aux(__gnu_cxx::__normal_iterator<monster_description*, std::vector<monster_description, std::allocator<monster_description> > >, monster_description const&) (vector.tcc:353)
==21949==    by 0x41788E: std::vector<monster_description, std::allocator<monster_description> >::push_back(monster_description const&) (stl_vector.h:925)
==21949==    by 0x414EB8: parse_monster_description(std::basic_ifstream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<monster_description, std::allocator<monster_description> >*) (descriptions.cpp:500)
==21949==    by 0x416176: parse_monster_descriptions(std::basic_ifstream<char, std::char_traits<char> >&, dungeon*, std::vector<monster_description, std::allocator<monster_description> >*) (descriptions.cpp:757)
==21949==    by 0x4166BC: parse_descriptions(dungeon*) (descriptions.cpp:810)
==21949==    by 0x402CB1: main (rlg327.cpp:88)
==21949== 
==21949== LEAK SUMMARY:
==21949==    definitely lost: 4,864 bytes in 2 blocks
==21949==    indirectly lost: 5,103 bytes in 50 blocks
==21949==      possibly lost: 0 bytes in 0 blocks
==21949==    still reachable: 391,573 bytes in 479 blocks
==21949==         suppressed: 0 bytes in 0 blocks
==21949== Reachable blocks (those to which a pointer was found) are not shown.
==21949== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==21949== 
==21949== For counts of detected and suppressed errors, rerun with: -v
==21949== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)
