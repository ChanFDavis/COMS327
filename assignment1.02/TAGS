
heap.c,1009
#undef min4,39
struct heap_node 6,51
  heap_node_t *next;next7,70
  heap_node_t *prev;prev8,91
  heap_node_t *parent;parent9,112
  heap_node_t *child;child10,135
  void *datum;datum11,157
  uint32_t degree;12,172
  uint32_t mark;13,191
#define splice_heap_node_lists(16,212
#define insert_heap_node_in_list(25,524
#define remove_heap_node_from_list(32,748
void print_heap_node(37,881
void print_heap(53,1203
void print_heap_node_list(70,1505
void heap_init(86,1704
void heap_node_delete(96,1940
void heap_delete(114,2244
heap_node_t *heap_insert(heap_insert125,2409
void *heap_peek_min(heap_peek_min145,2725
static void heap_link(150,2801
static void heap_consolidate(164,3123
void *heap_remove_min(heap_remove_min205,4056
int heap_combine(240,4590
static void heap_cut(269,5241
static void heap_cascading_cut(283,5522
int heap_decrease_key(297,5748
int heap_decrease_key_no_replace(311,5990
int32_t compare(335,6564
char *print_int(print_int340,6663
int main(349,6781

heap.h,245
# define HEAP_H2,15
typedef struct heap_node heap_node_t;11,114
typedef struct heap 13,153
  heap_node_t *min;min14,175
  uint32_t size;15,195
  int32_t (*compare)compare16,212
  void (*datum_delete)datum_delete17,269
} heap_t;18,301

macros.h,611
# define MACROS_H2,17
#  define dprintf(16,213
#  define dfprintf(17,256
#  define dprintf(19,320
#  define dfprintf(20,343
# define fieldwidth(23,382
# define exit(37,1201
# define fopen(42,1441
#  define malloc(76,3348
#  define calloc(92,4430
#  define strdup(107,5435
#  define free(117,6055
# define swap(125,6303
# define memswap(131,6415
# define structdup(137,6543
# define datacmp(144,6927
# define max2(153,7400
# define min2(160,7576
# define max 167,7752
# define min 168,7770
# define max3(170,7789
# define min3(171,7830
# define frand(173,7872
# define structdup(180,7984

rlg327.c,1937
	# define rand_under(15,330
	# define rand_range(19,473
typedef struct corridor_path 21,548
	heap_node_t *hn;hn22,579
	uint8_t pos[pos23,597
	uint8_t from[from24,614
	int32_t cost;25,632
} corridor_path_t;26,647
typedef enum dim 28,667
	dim_x,29,686
	dim_y,30,694
	num_dims31,702
} dim_t;32,712
typedef int16_t pair_t[pair_t34,722
#define DUNGEON_X 36,757
#define DUNGEON_Y 37,792
#define MIN_ROOMS 38,827
#define MAX_ROOMS 39,861
#define ROOM_MIN_X 40,895
#define ROOM_MIN_Y 41,928
#define ROOM_MAX_X 42,961
#define ROOM_MAX_Y 43,995
#define mappair(45,1030
#define mapxy(46,1087
#define hardnesspair(47,1122
#define hardnessxy(48,1189
typedef enum __attribute__ ((__packed__)) terrain_type 50,1235
	ter_debug,51,1292
	ter_wall,52,1304
	ter_wall_immutable,53,1315
	ter_floor,54,1336
	ter_floor_room,55,1348
	ter_floor_hall,56,1365
} terrain_type_t;57,1382
typedef struct room 59,1401
	pair_t position;60,1423
	pair_t size;61,1441
} room_t;62,1455
typedef struct dungeon 64,1466
	uint32_t num_rooms;65,1491
	room_t* rooms;66,1512
	terrain_type_t map[map68,1529
	uint8_t hardness[hardness77,2166
} dungeon_t;78,2207
static uint32_t in_room(80,2221
static int32_t corridor_path_cmp(96,2586
static void dijkstra_corridor(100,2735
	static void dijkstra_corridor_inv(198,6032
		#define hardnesspair_inv(251,7286
	static int connect_two_rooms(301,9546
	static int create_cycle(320,10113
	static int connect_rooms(362,11459
	int gaussian[gaussian375,11654
	typedef struct queue_node 383,11812
		int x,384,11841
		int x, y;384,11841
		struct queue_node *next;next385,11853
	} queue_node_t;386,11880
	static int smooth_hardness(388,11898
static int empty_dungeon(542,15822
static int place_rooms(560,16165
static int make_rooms(623,18392
int gen_dungeon(647,18912
void render_dungeon(657,19028
void delete_dungeon(685,19581
void init_dungeon(689,19620
int main(694,19676
